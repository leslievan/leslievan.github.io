<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>实验 on Arch Ive</title><link>https://leslievan.github.io/tags/%E5%AE%9E%E9%AA%8C/</link><description>Recent content in 实验 on Arch Ive</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>viruswjc@gmail.com (十三)</managingEditor><webMaster>viruswjc@gmail.com (十三)</webMaster><copyright>© 2021 **[ArchIve](https://leslievan.github.io)**</copyright><lastBuildDate>Sun, 07 Apr 2019 22:09:34 +0800</lastBuildDate><atom:link href="https://leslievan.github.io/tags/%E5%AE%9E%E9%AA%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>「OS」HDU-OS-Lab3-Linux 进程管理（二）管道通信</title><link>https://leslievan.github.io/2019/04/os-lab3-2/</link><pubDate>Sun, 07 Apr 2019 22:09:34 +0800</pubDate><author>viruswjc@gmail.com (十三)</author><guid>https://leslievan.github.io/2019/04/os-lab3-2/</guid><description>实验三的知识点是进程通信，进程通信的方式多种多样，既包括锁机制、信号量机制在内的低级通信方式，低级在于其交换的信息量少且效率较低，又包括共享</description></item><item><title>「OS」HDU-OS-Lab2-Linux 内核模块编程</title><link>https://leslievan.github.io/2019/03/os-lab2/</link><pubDate>Tue, 26 Mar 2019 22:01:15 +0800</pubDate><author>viruswjc@gmail.com (十三)</author><guid>https://leslievan.github.io/2019/03/os-lab2/</guid><description>Linux 内核采用了整体结构，上一个实验体会了编译内核时间的冗长与繁杂，一步错就要重新编译，这虽然提高了效率，但同时也让后续的维护变得困难，在这个基</description></item><item><title>「OS」HDU-OS-Lab1-Linux 内核编译及添加系统调用</title><link>https://leslievan.github.io/2019/01/os-lab1/</link><pubDate>Tue, 29 Jan 2019 21:42:56 +0800</pubDate><author>viruswjc@gmail.com (十三)</author><guid>https://leslievan.github.io/2019/01/os-lab1/</guid><description>添加一个系统调用，实现对指定进程的 nice 值的修改或读取功能，并返回进程最新的 nice 值及优先级 prio。 视频教程地址： https://www.bilibili.com/video/av47274857 源码地址： https://github.com/leslievan/Operator_System/tree/master/Operator_System_Lab1 以下内容全部在 Ubuntu 18.04</description></item></channel></rss>